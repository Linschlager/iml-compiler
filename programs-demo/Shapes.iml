program graph()
global
    record point (x:int64, y:int64);
    record rectangle (location: point, width: int64, height: int64);

    fun containsPoint (rect: rectangle, point: point) returns const contained: bool
    do
        contained init := (
            rect.location.x < point.x /\?
            point.x < rect.location.x + rect.width
        ) \/? (
            rect.location.y < point.y /\?
            point.y < rect.location.y + rect.height
        )
    endfun;

    fun containsRect (rect1: rectangle, rect2: rectangle) returns const contained: bool
    do
        // Rect1 contains the top left and bottom right corners of rect2
        contained init :=
        containsPoint(rect1, rect2.location) /\?
        containsPoint (rect1, point(rect2.location.x + rect2.width, rect2.location.y + rect2.height))
    endfun;

    const p: int64;
    const window: rectangle;
    var canvas: rectangle;
    var cursor: point
do
    // Init
    p init := 5;
    window init := rectangle(point(0, 0), 640, 480);
    canvas init := rectangle(point(window.location.x + p, window.location.y + p), window.width - 2 * p, window.height - 2 * p);
    // Read in cursor
    cursor init := point(0, 0);
    debugin cursor.x;
    debugin cursor.y;

    if not containsRect(window, canvas) then
        debugout 1 // Window doesn't contain canvas. But they intersect
    else
        if containsPoint(canvas, cursor) then
            // Check if canvas contains cursor
            debugout canvas;
            debugout cursor
        else
            debugout 2
        endif
    endif
endprogram
